services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeMeStrongPassword}
      POSTGRES_DB: moviedb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-changeMeMongoPassword}
      MONGO_INITDB_DATABASE: moviedb
    ports:
      - "27017:27017"
    volumes:
      - mongodb:/data/db

  redis:
    image: redis:7
    # Temporarily disable authentication for easier setup
    # command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-changeMeRedisPassword}"]
    # environment:
    #   REDIS_PASSWORD: ${REDIS_PASSWORD:-changeMeRedisPassword}
    ports:
      - "6379:6379"

  # Uncomment these when ready to containerize
  # backend:
  #   build: 
  #     context: ./movie-backend
  #     dockerfile: Dockerfile
  #   environment:
  #     DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-changeMeStrongPassword}@postgres:5432/moviedb
  #     MONGO_URL: mongodb://admin:${MONGO_PASSWORD:-changeMeMongoPassword}@mongo:27017/moviedb?authSource=admin
  #     REDIS_URL: redis://:${REDIS_PASSWORD:-changeMeRedisPassword}@redis:6379
  #     PORT: 3001
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     - mongo
  #     - redis
  #   ports:
  #     - "3001:3001"
  #   volumes:
  #     - ./uploads:/usr/src/app/uploads

  # frontend:
  #   build: 
  #     context: ./movie-frontend
  #     dockerfile: Dockerfile
  #   environment:
  #     NEXT_PUBLIC_API_URL: http://backend:3001/api
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - backend

volumes:
  pgdata:
  mongodb: